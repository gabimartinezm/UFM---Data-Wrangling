theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades") +
geom_text(
label=utilidades_proyeccion_años$utilidades,
nudge_x = 0.25, nudge_y = 0.25,
label.padding = unit(0.55, "lines"),
check_overlap = T
)
costos_2018 <- utilidades$utilidades_2018 - utilidades_proyeccion$utilidades_2019_10
costos_2018 <- utilidades$ventas_totales - utilidades_proyeccion$utilidades_2019_10
costos_2018 <- utilidades$ventas_totales - utilidades$utilidades_2018
costos_2019 <- utilidades$ventas_totales - utilidades_proyeccion$utilidades_2019_10
diff_costos <- (costos_2019*1)/costos_2018
diff_costos <- round((costos_2019*1)/costos_2018,3)
diff_costos <- round((costos_2019*1)/costos_2018,4)
diff_costos <- round((costos_2019*1)/costos_2018,4)
diff_costos <- round((costos_2019*1)/costos_2018,5)
diff_costos <- str(round((costos_2019*1)/costos_2018,3),1,4)
diff_costos <- str(round((costos_2019*1)/costos_2018,3),1,5)
diff_costos <- str(round((costos_2019*1)/costos_2018,3),2,5)
diff_costos <- round((costos_2019*1)/costos_2018,3)
vehiculo_codigo <- data %>%
group_by(vehiculo, Cod) %>%
summarise(n = n()) %>%
pivot_wider(names_from = vehiculo, values_from = n)
View(vehiculo_codigo)
# si se cambia de vehiculo ----------------------
# pickup - 79.1
data %>%
filter(cat_tiempo == "largo") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
# moto - 73.8
data %>%
filter(cat_tiempo == "largo") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "moto") %>%
mutate(avg_cv = mean(costo_directo))
# dif
costo_año_longpickup = 12230 * 79.1
costo_año_longmoto = 12230 * 73.8
dif_costo_long = costo_año_longpickup - costo_año_longmoto
##diferencia de avg segun distancia en vehiculo actual ------
#largo - 79.1
#moderado - 55.4
data %>%
filter(cat_tiempo == "moderado") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
#corto - 43.47
data %>%
filter(cat_tiempo == "corto") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
#277
avg_cv_largo7 = 44150 * 79.1
avg_cv_moderado7 = 44150 * 55.4
avg_cv_corto7 = 44150 * 43.47
dif_largo_mod7 = avg_cv_largo7 - avg_cv_moderado7
dif_largo_cor7 = avg_cv_largo7 - avg_cv_corto7
#224
avg_cv_largo4 = 43830 * 79.1
avg_cv_moderado4 = 43830 * 55.4
avg_cv_corto4 = 43830 * 43.47
dif_largo_mod4 = avg_cv_largo4 - avg_cv_moderado4
dif_largo_cor4 = avg_cv_largo4 - avg_cv_corto4
#-------------------------------------------------
data %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "moto") %>%
group_by(cat_tiempo) %>%
summarise(n = n()) %>%
arrange(desc(n))
# si se cambia de vehiculo ----------------------
# pickup - 79.1
data %>%
filter(cat_tiempo == "largo") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
# moto - 73.8
data %>%
filter(cat_tiempo == "largo") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "moto") %>%
mutate(avg_cv = mean(costo_directo))
# dif
costo_año_longpickup = 12230 * 79.1
costo_año_longmoto = 12230 * 73.8
dif_costo_long = costo_año_longpickup - costo_año_longmoto
##diferencia de avg segun distancia en vehiculo actual ------
#largo - 79.1
#moderado - 55.4
data %>%
filter(cat_tiempo == "moderado") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
#corto - 43.47
data %>%
filter(cat_tiempo == "corto") %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "pickup") %>%
mutate(avg_cv = mean(costo_directo))
#277
avg_cv_largo7 = 44150 * 79.1
avg_cv_moderado7 = 44150 * 55.4
avg_cv_corto7 = 44150 * 43.47
dif_largo_mod7 = avg_cv_largo7 - avg_cv_moderado7
dif_largo_cor7 = avg_cv_largo7 - avg_cv_corto7
#224
avg_cv_largo4 = 43830 * 79.1
avg_cv_moderado4 = 43830 * 55.4
avg_cv_corto4 = 43830 * 43.47
dif_largo_mod4 = avg_cv_largo4 - avg_cv_moderado4
dif_largo_cor4 = avg_cv_largo4 - avg_cv_corto4
#-------------------------------------------------
data %>%
filter(origen == "150224" | origen == "150277") %>%
filter(vehiculo == "moto") %>%
group_by(cat_tiempo) %>%
summarise(n = n()) %>%
arrange(desc(n))
baja_costos <- 29670 + 68512 + 1046355 + 1038771
costos_2018_bajas <- costos_2018 - baja_costos
costos_2019_bajas <- utilidades$ventas_totales - costos_2018_bajas
utilidades_2019_bajas <- utilidades$ventas_totales - costos_2018_bajas
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades") +
geom_text(
label=utilidades_proyeccion_años_baja$utilidades,
nudge_x = 0.25, nudge_y = 0.25,
label.padding = unit(0.55, "lines"),
check_overlap = T
)
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018", "2019 recomendaciones","2019 v1", "2019 v2"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_2019_bajas, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top))
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades") +
geom_text(
label=utilidades_proyeccion_años_baja$utilidades,
nudge_x = 0.25, nudge_y = 0.25,
label.padding = unit(0.55, "lines"),
check_overlap = T
)
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades") +
geom_text(
label=utilidades_proyeccion_años_baja$utilidades,
nudge_x = 0.25, nudge_y = 0.25,
label.padding = unit(0.55, "lines"),
check_overlap = T
)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 v1", "2019 v2", "2019 recomendaciones"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))
# cargar librerias
library(readr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(lubridate)
library(formattable)
library(RColorBrewer)
#cargar los datos
data <- read_csv("c1.csv")
#ver con la data que se esta trabajando
head(data)
str(data)
#las columnas del final parecieran no tener nada por lo que se dropean
sum(is.na(data$...23))
sum(is.na(data$...24))
sum(is.na(data$...25))
sum(is.na(data$...26))
sum(is.na(data$...27))
sum(is.na(data$...28))
data <- data %>%
select(-c(...23, ...24, ...25, ...26, ...27, ...28))
#pasar la fecha a formato de fecha
data <- data %>%
mutate(Fecha = dmy(Fecha))
str(data)
#pasar las columnas de costo y tipo de vehiculo a formato tidy para poder trabajar más facil con ellas
camion <- data %>%
filter(directoCamion_5 != "Q-") %>%
mutate(vehiculo = "camion",
costo_total = Camion_5,
costo_directo = directoCamion_5,
costo_fijo = fijoCamion_5) %>%
select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)
pickup <- data %>%
filter(directoPickup != "Q-" ) %>%
mutate(vehiculo = "pickup",
costo_total = Pickup,
costo_directo = directoPickup,
costo_fijo = fijoPickup) %>%
select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)
moto <- data %>%
filter(directoMoto != "Q-" ) %>%
mutate(vehiculo = "moto",
costo_total = Moto,
costo_directo = directoMoto,
costo_fijo = fijoMoto) %>%
select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)
data[ , c("costo_total", "costo_directo", "costo_fijo")] <- NA
#--camion--
data <- left_join(data, camion, by = c("ID", "factura", "Fecha"))
data <- data %>%
mutate(
costo_total = coalesce(costo_total.x, costo_total.y),
costo_directo = coalesce(costo_directo.x, costo_directo.y),
costo_fijo = coalesce(costo_fijo.x, costo_fijo.y)
) %>%
select(-c(costo_total.x, costo_total.y, costo_directo.x,
costo_directo.y, costo_fijo.x,costo_fijo.y))
#--pickup--
data <- left_join(data, pickup, by = c("ID", "factura", "Fecha"))
data <- data %>%
mutate(
costo_total = coalesce(costo_total.x, costo_total.y),
costo_directo = coalesce(costo_directo.x, costo_directo.y),
costo_fijo = coalesce(costo_fijo.x, costo_fijo.y),
vehiculo = coalesce(vehiculo.x, vehiculo.y)
) %>%
select(-c(costo_total.x, costo_total.y, costo_directo.x,
costo_directo.y, costo_fijo.x,costo_fijo.y, vehiculo.x, vehiculo.y))
#--moto--
data <- left_join(data, moto, by = c("ID", "factura", "Fecha"))
data <- data %>%
mutate(
costo_total = coalesce(costo_total.x, costo_total.y),
costo_directo = coalesce(costo_directo.x, costo_directo.y),
costo_fijo = coalesce(costo_fijo.x, costo_fijo.y),
vehiculo = coalesce(vehiculo.x, vehiculo.y)
) %>%
select(-c(costo_total.x, costo_total.y, costo_directo.x,
costo_directo.y, costo_fijo.x,costo_fijo.y, vehiculo.x, vehiculo.y))
#--drop las que ya no necesito
data <- data %>%
select(-c(Camion_5, Pickup, Moto, directoCamion_5, directoPickup, directoMoto,
fijoCamion_5, fijoPickup, fijoMoto))
# agregar las categorias de tiempo
data[ , "cat_tiempo"] <- NA
data <- data %>%
mutate(cat_tiempo = ifelse(!is.na(`5-30`), "breve",
ifelse(!is.na(`30-45`), "corto",
ifelse(!is.na(`45-75`), "moderado",
ifelse(!is.na(`75-120`), "largo",
ifelse(!is.na(`120+`), "extendido", NA))))))
data <- data %>%
select(-c(`5-30`, `30-45`, `45-75`, `75-120`, `120+`))
# pasar los numeros conn Q a algo que no sea character y el origen para que si sea character
data <- data %>%
mutate(factura = currency(factura, "Q"),
costo_total = currency(costo_total, "Q"),
costo_directo = currency(costo_directo, "Q"),
costo_fijo = currency(costo_fijo, "Q"),
origen = as.character(origen))
#grafica
ggplot(utilidades_proyeccion_años, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades <- data %>%
summarise(ventas_totales = sum(factura),
costos_totales = sum(costo_total)) %>%
mutate(utilidades_totales = ventas_totales - costos_totales,
utilidades_2018 = utilidades_totales * 0.75)
utilidades_year <- data.frame(year = c("2017", "2018"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018))
#grafica
ggplot(utilidades_year, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 2, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Utilidades para 2017 y 2018",
x = "Year",
y = "Utilidades") +
geom_text(
label=utilidades_year$utilidades,
nudge_x = 0.25, nudge_y = 0.25,
label.padding = unit(0.55, "lines"),
check_overlap = T
)
utilidades_proyeccion <- data %>%
summarise(ventas_totales = sum(factura),
costos_totales = sum(costo_total)) %>%
mutate(utilidades_totales = ventas_totales - costos_totales,
utilidades_2018 = utilidades_totales * 0.75,
utilidades_2019_10 = utilidades_2018 * 1.1,
utilidades_2019_top = utilidades_2019_10*1.215)
utilidades_proyeccion_años <- data.frame(year = c("2017", "2018", "2019 v1", "2019 v2"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top))
#grafica
ggplot(utilidades_proyeccion_años, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades_proyeccion <- data %>%
summarise(ventas_totales = sum(factura),
costos_totales = sum(costo_total)) %>%
mutate(utilidades_totales = ventas_totales - costos_totales,
utilidades_2018 = utilidades_totales * 0.75,
utilidades_2019_10 = utilidades_2018 * 1.1,
utilidades_2019_top = utilidades_2019_10*1.215)
utilidades_proyeccion_años <- data.frame(year = c("2017", "2018", "2019 10%", "2019 ideal"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top))
#grafica
ggplot(utilidades_proyeccion_años, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
# hay que restar 29,670 y 68,512 y 1,046,355 y 1,038,771
baja_costos <- 29670 + 68512 + 1046355 + 1038771
costos_2018_bajas <- costos_2018 - baja_costos
costos_2018 <- utilidades$ventas_totales - utilidades$utilidades_2018
costos_2019 <- utilidades$ventas_totales - utilidades_proyeccion$utilidades_2019_10
diff_costos <- round((costos_2019*1)/costos_2018,3)
paste0("Los costos de 2018 fueron: ", costos_2018)
paste0("Los costos de 2019 fueron: ", costos_2019)
# hay que restar 29,670 y 68,512 y 1,046,355 y 1,038,771
baja_costos <- 29670 + 68512 + 1046355 + 1038771
costos_2018_bajas <- costos_2018 - baja_costos
utilidades_2019_bajas <- utilidades$ventas_totales - costos_2018_bajas
#https://www.prensalibre.com/economia/el-1-de-febrero-comienza-a-regir-una-nueva-tarifa-de-energia-electrica-cuanto-mas-hay-que-pagar/
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 v1", "2019 v2", "2019 recomendaciones"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 v1", "2019 v2", "2019 recomendaciones"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 v1", "2019 v2", "2019 recomendaciones"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))
View(utilidades_proyeccion_años_baja)
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades_proyeccion_años_baja <- data.frame(year = c("2018","2019 v1", "2019 v2", "2019 recomendaciones", "2017"),
utilidades = c(utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas, utilidades$utilidades_totales))
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 10%", "2019 ideal", "2019 recomendaciones"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))
#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Proyección de utilidades para 2019",
x = "Year",
y = "Utilidades")
kable(margen_vehiculo %>%
select(ingresos_veh, costos_veh, utilidad_veh, prop) %>%
arrange(desc(utilidad_veh)))
viajes_vehiculo <- data %>%
group_by(vehiculo) %>%
summarise(n = n()) %>%
mutate(prop = round(n/263725, 3))
#margen por vehiculo
margen_vehiculo <- data %>%
select(vehiculo, factura, costo_total, costo_directo, costo_fijo) %>%
group_by(vehiculo) %>%
summarise(ingresos_veh = sum(factura),
costos_veh = sum(costo_total),
costosd_veh = sum(costo_directo),
costosf_veh = sum(costo_fijo)) %>%
mutate(utilidad_veh = ingresos_veh - costos_veh,
margen_ut_veh = substr(((utilidad_veh*1)/ingresos_veh),2,5))
View(margen_vehiculo)
#margen por vehiculo
margen_vehiculo <- data %>%
select(vehiculo, factura, costo_total, costo_directo, costo_fijo) %>%
group_by(vehiculo) %>%
summarise(ingresos_veh = sum(factura),
costos_veh = sum(costo_total),
costosd_veh = sum(costo_directo),
costosf_veh = sum(costo_fijo)) %>%
mutate(utilidad_veh = ingresos_veh - costos_veh,
margen_ut_veh = substr(((utilidad_veh*1)/ingresos_veh),2,5))
viajes_vehiculo <- data %>%
group_by(vehiculo) %>%
summarise(n = n()) %>%
mutate(prop = round(n/263725, 3))
#grafica
ggplot(viajes_vehiculo, aes(x = vehiculo, y = n, fill = vehiculo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 3, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Tipo de vehiculo",
title = "Viajes segun cada tipo de vehiculo",
x = "Tipo de vehiculo",
y = "# de viajes")
vehiculo_codigo <- data %>%
group_by(vehiculo, Cod) %>%
summarise(n = n()) %>%
pivot_wider(names_from = vehiculo, values_from = n)
kable(vehiculo_codigo)
utilidades <- data %>%
summarise(ventas_totales = sum(factura),
costos_totales = sum(costo_total)) %>%
mutate(utilidades_totales = ventas_totales - costos_totales,
utilidades_2018 = utilidades_totales * 0.75)
utilidades_year <- data.frame(year = c("2017", "2018"),
utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018))
#grafica
ggplot(utilidades_year, aes(x = year, y = utilidades, fill = year)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = brewer.pal(n = 2, name = "YlGnBu")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90)) +
labs(fill = "Year",
title = "Utilidades para 2017 y 2018",
x = "Year",
y = "Utilidades")
View(utilidades_proyeccion)
print(diff_costos)
print(costos_2018_bajas)
print(utilidades_2019_bajas)
