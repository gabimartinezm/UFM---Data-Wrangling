---
output: github_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE)
```

```{r, include=FALSE}
# cargar librerias
library(readr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(ggplot2)
library(lubridate)
library(formattable)
library(RColorBrewer)
```

```{r, include=FALSE}
#cargar los datos 
data <- read_csv("c1.csv")

#ver con la data que se esta trabajando
head(data)
str(data)

#las columnas del final parecieran no tener nada por lo que se dropean
sum(is.na(data$...23))
sum(is.na(data$...24))
sum(is.na(data$...25))
sum(is.na(data$...26))
sum(is.na(data$...27))
sum(is.na(data$...28))

data <- data %>% 
  select(-c(...23, ...24, ...25, ...26, ...27, ...28))

#pasar la fecha a formato de fecha
data <- data %>% 
  mutate(Fecha = dmy(Fecha))

str(data)


#pasar las columnas de costo y tipo de vehiculo a formato tidy para poder trabajar más facil con ellas

camion <- data %>% 
  filter(directoCamion_5 != "Q-") %>% 
  mutate(vehiculo = "camion",
         costo_total = Camion_5,
         costo_directo = directoCamion_5,
         costo_fijo = fijoCamion_5) %>% 
  select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)

pickup <- data %>% 
  filter(directoPickup != "Q-" ) %>% 
  mutate(vehiculo = "pickup",
         costo_total = Pickup,
         costo_directo = directoPickup,
         costo_fijo = fijoPickup) %>% 
  select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)

moto <- data %>% 
  filter(directoMoto != "Q-" ) %>% 
  mutate(vehiculo = "moto",
         costo_total = Moto,
         costo_directo = directoMoto,
         costo_fijo = fijoMoto) %>% 
  select(ID, factura, Fecha, vehiculo, costo_total, costo_directo, costo_fijo)

data[ , c("costo_total", "costo_directo", "costo_fijo")] <- NA

#--camion--
data <- left_join(data, camion, by = c("ID", "factura", "Fecha"))

data <- data %>% 
  mutate(
    costo_total = coalesce(costo_total.x, costo_total.y),
    costo_directo = coalesce(costo_directo.x, costo_directo.y),
    costo_fijo = coalesce(costo_fijo.x, costo_fijo.y)
  ) %>% 
  select(-c(costo_total.x, costo_total.y, costo_directo.x, 
            costo_directo.y, costo_fijo.x,costo_fijo.y)) 

#--pickup--
data <- left_join(data, pickup, by = c("ID", "factura", "Fecha"))

data <- data %>% 
  mutate(
    costo_total = coalesce(costo_total.x, costo_total.y),
    costo_directo = coalesce(costo_directo.x, costo_directo.y),
    costo_fijo = coalesce(costo_fijo.x, costo_fijo.y),
    vehiculo = coalesce(vehiculo.x, vehiculo.y)
  ) %>% 
  select(-c(costo_total.x, costo_total.y, costo_directo.x, 
            costo_directo.y, costo_fijo.x,costo_fijo.y, vehiculo.x, vehiculo.y))

#--moto--
data <- left_join(data, moto, by = c("ID", "factura", "Fecha"))

data <- data %>% 
  mutate(
    costo_total = coalesce(costo_total.x, costo_total.y),
    costo_directo = coalesce(costo_directo.x, costo_directo.y),
    costo_fijo = coalesce(costo_fijo.x, costo_fijo.y),
    vehiculo = coalesce(vehiculo.x, vehiculo.y)
  ) %>% 
  select(-c(costo_total.x, costo_total.y, costo_directo.x, 
            costo_directo.y, costo_fijo.x,costo_fijo.y, vehiculo.x, vehiculo.y))

#--drop las que ya no necesito
data <- data %>% 
  select(-c(Camion_5, Pickup, Moto, directoCamion_5, directoPickup, directoMoto,
            fijoCamion_5, fijoPickup, fijoMoto))

# agregar las categorias de tiempo 
data[ , "cat_tiempo"] <- NA

data <- data %>% 
  mutate(cat_tiempo = ifelse(!is.na(`5-30`), "breve",
                     ifelse(!is.na(`30-45`), "corto",
                        ifelse(!is.na(`45-75`), "moderado",
                           ifelse(!is.na(`75-120`), "largo",
                              ifelse(!is.na(`120+`), "extendido", NA))))))

data <- data %>% 
  select(-c(`5-30`, `30-45`, `45-75`, `75-120`, `120+`))

# pasar los numeros conn Q a algo que no sea character y el origen para que si sea character
data <- data %>% 
  mutate(factura = currency(factura, "Q"),
         costo_total = currency(costo_total, "Q"),
         costo_directo = currency(costo_directo, "Q"),
         costo_fijo = currency(costo_fijo, "Q"),
         origen = as.character(origen))
  
```

# Inversiones en Energía, S.A. de C.V. - Informe de Operaciones 2017

### Resumen 

En este informe de operaciones se analizaron las ventas de 2017 para poder tener insights hacia que fue lo que afectaron las ventas de 2018 y poder tomar como ejemplo el año 2017 para poder aumentar el margen operativo en 2019 y lograr un funcionamiento eficiente de la empresa 

### Supuestos

Se asumio que las columnas que indicaban cuanto se tardaban en llegar hablaban en términos de minutos y se generó categorías para poder hacer referencia a estos de manera más fácil. Las categorías serán de la siguiente manera: 

minutos | categoría
------- | ---------
5-30    | breve
30-45   | corto
45-75   | moderado
75-120  | largo
120+    | extendido



### Resultados 

##### Hipotesis 1: Las motos son el vehiculo más eficiente 

Primero se desea ver el margen de utilidad de los diferentes servicios que se prestan:

```{r, message=FALSE}
#margen por codigo
margen_codigo <- data %>% 
  select(Cod, factura, costo_total, costo_directo, costo_fijo) %>% 
  group_by(Cod) %>% 
  summarise(ingresos_cod = sum(factura),
            costos_cod = sum(costo_total),
            costosd_cod = sum(costo_directo),
            costosf_cod = sum(costo_fijo)) %>% 
  mutate(utilidad_cod = ingresos_cod - costos_cod,
         margen_ut_cod = substr(((utilidad_cod*1)/ingresos_cod),2,5))



#graf de cual hace mas utilidades/ingresos
kable(margen_codigo %>% 
        select(Cod, ingresos_cod, costos_cod, utilidad_cod, margen_ut_cod) %>% 
        arrange(desc(utilidad_cod)))
```

Se puede ver que todos los servicios marginan de una manera similar manteniendose en los 20% por lo que se va a analizar eficiencia y efectividad en cuanto a los tipos de vehiculos que se utilizan:

```{r}
#margen por vehiculo
margen_vehiculo <- data %>% 
  select(vehiculo, factura, costo_total, costo_directo, costo_fijo) %>% 
  group_by(vehiculo) %>% 
  summarise(ingresos_veh = sum(factura),
            costos_veh = sum(costo_total),
            costosd_veh = sum(costo_directo),
            costosf_veh = sum(costo_fijo)) %>% 
  mutate(utilidad_veh = ingresos_veh - costos_veh,
         margen_ut_veh = substr(((utilidad_veh*1)/ingresos_veh),2,5))

#viajes segun vehiculo 

viajes_vehiculo <- data %>% 
  group_by(vehiculo) %>% 
  summarise(n = n()) %>% 
  mutate(prop = round(n/263725, 3))

#grafica
ggplot(viajes_vehiculo, aes(x = vehiculo, y = n, fill = vehiculo)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 3, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Tipo de vehiculo", 
       title = "Viajes segun cada tipo de vehiculo",
       x = "Tipo de vehiculo",
       y = "# de viajes") 

kable(margen_vehiculo %>% 
        select(vehiculo, ingresos_veh, costos_veh, utilidad_veh, margen_ut_veh) %>% 
        arrange(desc(utilidad_veh)))
```

Como se puede ver actualmente el más utilizado es el pickup y por ende, este es el que genera más utilidades. Sin embargo, el que tiene mejor margen de utilidad es la moto pero es utilizado muy pocas veces. Esto llevo a investigar si se podrían hacer algunos cambios en los viajes para aprovechar el margen de la moto. 

```{r, message=FALSE, warning=FALSE}
# que pasa si se pasaran los de pick up a motos, si se pasaran visitas, revisiones y las que son solo de ver a motos se hace mas margen 

vehiculo_codigo <- data %>% 
  group_by(vehiculo, Cod) %>% 
  summarise(n = n()) %>%  
  pivot_wider(names_from = vehiculo, values_from = n)

kable(vehiculo_codigo)
```

```{r, include=FALSE}
#avg costo total de camion 139.05 y variable 88.31
data %>% 
  filter(vehiculo == "camion") %>% 
  summarise(avg_costos = mean(costo_total),
            agv_costosvar = mean(costo_directo))

#avg costo total de pickup 97.69 y variable 62.05
data %>% 
  filter(vehiculo == "pickup") %>% 
  summarise(avg_costos = mean(costo_total),
            agv_costosvar = mean(costo_directo))

#avg costo total de pickup 68.78 y variable 43.65
data %>% 
  filter(vehiculo == "moto") %>% 
  summarise(avg_costos = mean(costo_total),
            agv_costosvar = mean(costo_directo))

sum_viajes_camion_cambios = 9665 + 3504 + 183 + 16318

sum_viajes_pickup_cambios = 22255 + 43889 + 2188 + 180

costo_viajes_camion_cambio = sum_viajes_camion_cambios * 88.31
costo_viajes_camion_cambio_moto = sum_viajes_camion_cambios * 43.65
  
costo_viajes_pickup_cambio = sum_viajes_pickup_cambios * 62.05
costo_viajes_pickup_cambio_moto = sum_viajes_pickup_cambios * 43.65

dif_moto_camion_viajes = costo_viajes_camion_cambio - costo_viajes_camion_cambio_moto

dif_moto_pickup_viajes = costo_viajes_pickup_cambio - costo_viajes_pickup_cambio_moto

  
#pasar los largos de revision de pick up a motos
```


Actualmente, la moto solo es utilizada solo en el 2% de los viajes a comparación del pickup que es utilizado para el 74% de los viajes.

Por esto se decidió considerar como afectaría a los costos variables o directos para los viajes de verificación y visita, ya que se considera que para estos no se necesitaría mucho equipo o materiales a parte por lo que si se podría realizar el viaje en moto. 

Actualmente se realizan 29,670 viajes de este tipo en camión y 68,512 en pickup, lo que lleva a unos costos variables totales de 2,620,158 y 4,251,170 respectivamente. Si se hiciera el cambio para estos viajes se vería una baja de costos de 29,670 y 68,512 respectivamente, para unos costos variables totales de 1,295,096 y 2,990,549 respectivamente 


##### Hipotesis 2: los centros de distribución no son utilizados de manera eficiente
```{r}
#cuantos centros de distribucion tengo 
centros_distribucion <- data %>% 
  group_by(origen) %>% 
  summarise(n = n()) %>% 
  mutate(propocion_viajes = round(n/263725, 3))

#grafica
ggplot(centros_distribucion, aes(x = origen, y = n, fill = origen)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Punto de Origen", 
       title = "Viajes segun cada punto de origen",
       x = "Punto de origen",
       y = "# de viajes")

```

Se puede observar que los viajes que bien distribuidos entre los centros de origen. Los centros de origen 224 y 277 manejan un 80% entre los dos, mientras que el 278 y 841 manejan solo el 20%, lo que signifca que no se estan utilizando estos centros de la manera más eficiente posible.

```{r, message=FALSE}
#distancia de tiempo entre cada estacion
distancia_origen <- data %>%
  group_by(origen, cat_tiempo) %>% 
  summarise(count = n()) 


# grafica
ggplot(distancia_origen, aes(x = origen, y = count, fill = cat_tiempo)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Categoria de tiempo", 
       title = "Viajes según categoria de tiempo dependiendo del punto de origen",
       x = "Categoria de tiempo",
       y = "# de viajes")
```

Investigando más profundo se encontró que la mayoría de viajes caen en la categoría de tiempo "largo" es decir que el técnico toma entre 75 y 120 minutos en llegar a la ubicación del poste y este es el caso para los 4 centros de origen. 

```{r, warning=FALSE, message=FALSE}
viajes_cod_vehiculo_mod <- data %>% 
  filter(cat_tiempo == "largo") %>% 
  group_by(Cod, origen, vehiculo) %>% 
  summarise(n = n()) %>% 
  arrange(desc(n))
```

```{r, include=FALSE}
# si se cambia de vehiculo ----------------------

# pickup - 79.1
data %>% 
  filter(cat_tiempo == "largo") %>% 
  filter(origen == "150224" | origen == "150277") %>% 
  filter(vehiculo == "pickup") %>% 
  mutate(avg_cv = mean(costo_directo))

# moto - 73.8

data %>% 
  filter(cat_tiempo == "largo") %>% 
  filter(origen == "150224" | origen == "150277") %>% 
  filter(vehiculo == "moto") %>% 
  mutate(avg_cv = mean(costo_directo))

# dif 

costo_año_longpickup = 12230 * 79.1
costo_año_longmoto = 12230 * 73.8

dif_costo_long = costo_año_longpickup - costo_año_longmoto

##diferencia de avg segun distancia en vehiculo actual ------

#largo - 79.1

#moderado - 55.4
data %>% 
  filter(cat_tiempo == "moderado") %>% 
  filter(origen == "150224" | origen == "150277") %>% 
  filter(vehiculo == "pickup") %>% 
  mutate(avg_cv = mean(costo_directo))

#corto - 43.47
data %>% 
  filter(cat_tiempo == "corto") %>% 
  filter(origen == "150224" | origen == "150277") %>% 
  filter(vehiculo == "pickup") %>% 
  mutate(avg_cv = mean(costo_directo))

#277
avg_cv_largo7 = 44150 * 79.1
avg_cv_moderado7 = 44150 * 55.4
avg_cv_corto7 = 44150 * 43.47

dif_largo_mod7 = avg_cv_largo7 - avg_cv_moderado7
dif_largo_cor7 = avg_cv_largo7 - avg_cv_corto7

#224
avg_cv_largo4 = 43830 * 79.1
avg_cv_moderado4 = 43830 * 55.4
avg_cv_corto4 = 43830 * 43.47

dif_largo_mod4 = avg_cv_largo4 - avg_cv_moderado4
dif_largo_cor4 = avg_cv_largo4 - avg_cv_corto4


#-------------------------------------------------
data %>% 
  filter(origen == "150224" | origen == "150277") %>% 
  filter(vehiculo == "moto") %>% 
  group_by(cat_tiempo) %>% 
  summarise(n = n()) %>% 
  arrange(desc(n))

```


Primero, al tener los centros tan alejados se incurren en costos variables más altos con costos variables de 3,492,265 y 3,466,953 actuales en los dos centros de origen más utilizados para estos viajes. Tan solo con cambiar al centro a un lugar donde estos viajes queden en categoría de un viaje "moderado" se ve una baja en los costos de 1,046,355 y 1,038,771 respectivamente. Si se cambia de ubicación para la categoría de "corto" se llevaría a una baja en costos variables de 1,573,065 y 1,561,663 respectivamente. 

Por ultimo se puede ver que la mayoría de estos viajes "largos" son hechos en un pickup para hacer revisiones y verificaciones, donde ya se habia mencionado anteriormente que se podría reducir costos utilizando una moto. Esto lleva a concluir que ni los centros de origen ni los recorridos se estan haciendo de manera efectiva. 

##### Estrategias a seguir para llegar a niveles de 2017 en 2019

Primero, se necesita saber con cuánto se trabajo en 2017 y 2018: 

```{r, include=FALSE}

utilidades <- data %>% 
  summarise(ventas_totales = sum(factura),
            costos_totales = sum(costo_total)) %>% 
  mutate(utilidades_totales = ventas_totales - costos_totales,
         utilidades_2018 = utilidades_totales * 0.75)

utilidades_year <- data.frame(year = c("2017", "2018"),
                             utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018))
```

```{r}
#grafica
ggplot(utilidades_year, aes(x = year, y = utilidades, fill = year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 2, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Year", 
       title = "Utilidades para 2017 y 2018",
       x = "Year",
       y = "Utilidades") 
```

Para referencia, si se logrará aumentar el 10% en 2019 y llegar a los niveles de 2017 se vería de la siguiente manera: 

```{r}
utilidades_proyeccion <- data %>% 
  summarise(ventas_totales = sum(factura),
            costos_totales = sum(costo_total)) %>% 
  mutate(utilidades_totales = ventas_totales - costos_totales,
         utilidades_2018 = utilidades_totales * 0.75,
         utilidades_2019_10 = utilidades_2018 * 1.1,
         utilidades_2019_top = utilidades_2019_10*1.215) 

utilidades_proyeccion_años <- data.frame(year = c("2017", "2018", "2019 10%", "2019 ideal"),
                             utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top))

#grafica
ggplot(utilidades_proyeccion_años, aes(x = year, y = utilidades, fill = year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 4, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Year", 
       title = "Proyección de utilidades para 2019",
       x = "Year",
       y = "Utilidades")
```

Como ya se sabía, en 2018 se vió una baja del 25% en las utilidades. Se podría hacer el supuesto que los ingresos o servicios dados por la empresa se mantienen similares año por año ya que los postes de luz no son tan fácil de cambiar o decidir dejar de pagar, por lo que las bajas de 2018 se deben a un aumento de costos.
Si se asume que tuvieron ingresos similares los costos quedarían de la siguiente manera

```{r}
costos_2018 <- utilidades$ventas_totales - utilidades$utilidades_2018
costos_2019 <- utilidades$ventas_totales - utilidades_proyeccion$utilidades_2019_10

diff_costos <- round((costos_2019*1)/costos_2018,3)

paste0("Los costos de 2018 fueron: ", costos_2018)
paste0("Los costos de 2019 deberian de ser: ", costos_2019)
```

La diferencia de costos es de 2.11%, por lo que hay que lograr que los costos de 2018 bajen en esa cantidad.

```{r}
# hay que restar 29,670 y 68,512 y 1,046,355 y 1,038,771

baja_costos <- 29670 + 68512 + 1046355 + 1038771

costos_2018_bajas <- costos_2018 - baja_costos

utilidades_2019_bajas <- utilidades$ventas_totales - costos_2018_bajas

  
```


Según los cambios que se sugirieron actualmente, si se implementaran se llegaría a una baja de costos de 2,183,308 que llevaría incluso a una utilidad más alta de ese 10%, es mas se llegan a niveles similares que en 2017, con una utilidad de 8,568,865.75

```{r}

utilidades_proyeccion_años_baja <- data.frame(year = c("2017", "2018","2019 10%", "2019 ideal", "2019 recomendaciones"),
                             utilidades = c(utilidades$utilidades_totales, utilidades$utilidades_2018, utilidades_proyeccion$utilidades_2019_10, utilidades_proyeccion$utilidades_2019_top, utilidades_2019_bajas))

#grafica
ggplot(utilidades_proyeccion_años_baja, aes(x = year, y = utilidades, fill = year)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
  scale_fill_manual(values = brewer.pal(n = 5, name = "YlGnBu")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90)) +
  labs(fill = "Year", 
       title = "Proyección de utilidades para 2019",
       x = "Year",
       y = "Utilidades")
```


### Conclusiones y recomendaciones 

+ Hacer el cambio para que los viajes que sean de verificación y visita sean llevados exclusivamente en motos
+ Ya sea abrir nuevos centros de distribución a un lugar más cercano a la donde se hacen la mayoría de viajes o reubicar los centros de distribución que no son tan utilizados actualmente