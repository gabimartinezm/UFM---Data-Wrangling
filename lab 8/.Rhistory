imputacion_regresion <- function(columna, data) {
modelo <- lm(formula = !is.na({{columna}}) ~  Survived + !is.na(Fare) + !is.na(SibSp) + !is.na(Parch), data = data)
data <<- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo, c(Survived, Fare)), {{columna}}))
return(data)
}
imputacion_regresion(Age, data)
imputacion_regresion(Age, data)
data <- read_csv("titanic_MD.csv")
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
modelo <- lm(formula = !is.na({{columna}}) ~  Survived + !is.na(Fare) + !is.na(SibSp) + !is.na(Parch), data = data)
data <<- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo, c(Survived, Fare)), {{columna}}))
return(data)
}
imputacion_regresion(Age, data)
data %>%
lm(formula = !is.na(Age) ~  Survived + !is.na(Fare) + !is.na(SibSp) + !is.na(Parch), data = data) %>%
mutate(Age = ifelse(is.na(Age), predict(modelo, c(Survived, Fare, SibSp, Parch)), Age))
lm(formula = !is.na(Age) ~  Survived + !is.na(Fare) + !is.na(SibSp) + !is.na(Parch), data = data)
modelo <- lm(formula = !is.na(Age) ~  Survived + !is.na(Fare) + !is.na(SibSp) + !is.na(Parch), data = data)
data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo, c(Survived, Fare, SibSp, Parch)), Age))
data <- read_csv("titanic_MD.csv")
data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo, c(Survived, Fare, SibSp, Parch)), Age))
class(data)
as.data.frame(data)
data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo, c(Survived, Fare, SibSp, Parch)), Age))
View(data)
modelo_age <- lm(formula = !is.na(Age) ~  Survived + Pclass, data = data)
lm(formula = !is.na(Age) ~  Survived + Pclass, data = data)
data <- read_csv("titanic_MD.csv")
imputacion_media <- function(columna, data) {
media_col <- data %>%
filter(!is.na({{columna}})) %>%
summarise(media_col = round(mean({{columna}}, na.rm = TRUE))) %>%
pull(media_col)
print(media_col)
data <<- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), media_col, {{columna}}))
return(data)
}
imputacion_mediana <- function(columna, data) {
mediana_col <- data %>%
filter(!is.na({{columna}})) %>%
summarise(mediana_col = round(median({{columna}}, na.rm = TRUE))) %>%
pull(mediana_col)
print(mediana_col)
data <<- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), mediana_col, {{columna}}))
return(data)
}
imputacion_moda <- function(columna, data) {
moda_col <- data %>%
filter(!is.na({{columna}})) %>%
summarise(moda_col = round(Mode({{columna}}, na.rm = TRUE))) %>%
pull(moda_col)
print(moda_col)
data <<- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), moda_col, {{columna}}))
return(data)
}
#imputacion por medio de outliers ---------
#Standard deviation approach
imputacion_outliers <- function(columna, data) {
lower_p <- data %>%
filter(!is.na({{columna}})) %>%
summarise(lower_p = round(quantile({{columna}}, na.rm = TRUE, probs = 0.10))) %>%
pull(lower_p)
upper_p <- data %>%
filter(!is.na({{columna}})) %>%
summarise(upper_p = round(quantile({{columna}}, na.rm = TRUE, probs = 0.90))) %>%
pull(upper_p)
data <<- data %>%
mutate({{columna}} := ifelse({{columna}} < lower_p | is.na({{columna}}), lower_p, {{columna}}),
{{columna}} := ifelse({{columna}} > upper_p, upper_p, {{columna}}))
}
modelo_age <- lm(formula = !is.na(Age) ~  Survived + Pclass, data = data)
predict(modelo_age, c(1,2))
a = data.frame(Survived = 0 & Pclass = 2)
a <- data.frame(Survived = 0 & Pclass = 2)
# The predictor vector.
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
# The resposne vector.
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
# Apply the lm() function.
relation <- lm(y~x)
# Find weight of a person with height 170.
a <- data.frame(x = 170)
View(a)
result <-  predict(relation,a)
print(result)
# Filter out rows with missing Age
data_filtered <- data[!is.na(data$Age), ]
# Fit the linear regression model
modelo_age <- lm(formula = Age ~ Survived + Pclass, data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), Age))
View(data)
#regresion lineal
data <- read_csv("titanic_MD.csv")
# Filter out rows with missing Age
data_filtered <- data[!is.na(data$Age), ]
# Fit the linear regression model
modelo_age <- lm(formula = Age ~  Survived + Fare + SibSp + Parch, data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), Age))
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass, Fare = Fare, SibSp = SibSp, Parch = Parch), interval = "prediction"), Age))
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
# Filter out rows with missing Age
data_filtered <- data[!is.na(data$columna), ]
# Fit the linear regression model
modelo_age <- lm(formula = {{columna}} ~ Survived + Pclass, data = data_filtere|d)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} = ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
# Filter out rows with missing Age
data_filtered <- data[!is.na(data$columna), ]
# Fit the linear regression model
modelo_age <- lm(formula = {{columna}} ~ Survived + Pclass, data = data_filtere|d)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
return(data)
}
#regresion lineal
data <- read_csv("titanic_MD.csv")
imputacion_regresion(Age, data)
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
# Filter out rows with missing Age
data_filtered <- data[!is.na(data[[columna]]), ]
# Fit the linear regression model
modelo_age <- lm(formula = as.formula(paste(columna, " ~ Survived + Pclass")), data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction")[, 1], {{columna}}))
return(data)
}
imputacion_regresion("Age", data)
#outliers
data <- read_csv("titanic_MD.csv")
imputacion_outliers(Age, data)
imputacion_outliers(Fare, data)
data_ouliers <- data
View(data_ouliers)
imputacion_outliers(SibSp, data)
imputacion_outliers(Parch, data)
data_ouliers <- data
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
# Filter out rows with missing Age
data_filtered <- data[!is.na(data[[columna]]), ]
# Fit the linear regression model
modelo_age <- lm(formula = as.formula(paste(columna, " ~ Survived + Pclass")), data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction")[, 1], {{columna}}))
return(data)
}
imputacion_regresion("Age", data)
data <- read_csv("titanic_MD.csv")
imputacion_regresion("Age", data)
data <- imputacion_regresion("Age", data)
data <- imputacion_regresion(Age, data)
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
data_filtered <- data[!is.na(data$columna), ]
# Fit the linear regression model
modelo_age <- lm(formula = {{columna}} ~ Survived + Pclass, data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
return(data)
}
data <- imputacion_regresion(Age, data)
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
data_modelo <- data %>%
filter(is.na({{columna}}))
# Fit the linear regression model
modelo_age <- lm(formula = {{columna}} ~ Survived + Pclass, data = data_modelo)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
return(data)
}
data <- imputacion_regresion(Age, data)
data <- read_csv("titanic_MD.csv")
data <- imputacion_regresion("Age", data)
data <- imputacion_regresion(Age, data)
imputacion_regresion("Age", data)
#imputacion por modelo de regresion lineal ---------------
imputacion_regresion <- function(columna, data) {
data_modelo <- data %>%
filter(is.na({{columna}})) %>%
mutate(Survived = as.numeric(Survived))
# Fit the linear regression model
modelo_age <- lm(formula = {{columna}} ~ Survived + Pclass, data = data_modelo)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate({{columna}} := ifelse(is.na({{columna}}), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), {{columna}}))
return(data)
}
imputacion_regresion("Age", data)
data %>%
summarise(n_distinct(Survived))
#regresion lineal
data <- read_csv("titanic_MD.csv")
# Filter out rows with missing Age
data_filtered <- data[!is.na(data$Age), ]
# Fit the linear regression model
modelo_age <- lm(formula = Age ~ Survived + Pclass, data = data_filtered)
# Now, you can use the same mutate code to predict and fill missing Age values in the original dataset
data <- data %>%
mutate(Age = ifelse(is.na(Age), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), Age))
#SibSp ---------
data_filtered <- data[!is.na(data$SibSp), ]
modelo_age <- lm(formula = SibSp ~ Survived + Pclass, data = data_filtered)
data <- data %>%
mutate(SibSp = ifelse(is.na(SibSp), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), SibSp))
data_regresion <- data
#Parch ---------
data_filtered <- data[!is.na(data$Parch), ]
modelo_age <- lm(formula = Parch ~ Survived + Pclass, data = data_filtered)
data <- data %>%
mutate(Parch = ifelse(is.na(Parch), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), Parch))
#Parch ---------
data_filtered <- data[!is.na(data$Fare), ]
modelo_age <- lm(formula = Fare ~ Survived + Pclass, data = data_filtered)
data <- data %>%
mutate(Fare = ifelse(is.na(Fare), predict(modelo_age, newdata = data.frame(Survived = Survived, Pclass = Pclass), interval = "prediction"), Fare))
data_regresion <- data
View(data_regresion)
data_correcta <- read_csv("titanic.csv")
#mediana
data <- read_csv("titanic_MD.csv")
#media
imputacion_media(Age, data)
imputacion_media(SibSp, data)
imputacion_media(Parch, data)
imputacion_media(Fare, data)
data_media <- data
data <- read_csv("titanic_MD.csv")
imputacion_mediana(Age, data)
imputacion_mediana(SibSp, data)
imputacion_mediana(Parch, data)
imputacion_mediana(Fare, data)
data_mediana <- data
data <- read_csv("titanic_MD.csv")
imputacion_moda(Age, data)
imputacion_moda(SibSp, data)
imputacion_moda(Parch, data)
imputacion_moda(Fare, data)
data_moda <- data
data_correcta <- read_csv("titanic.csv")
View(data_correcta)
View(data_media)
View(data_mediana)
View(data_moda)
View(data_ouliers)
View(data_regresion)
#outliers
data <- read_csv("titanic_MD.csv")
data_comparar <- data %>%
filter(!is.na(Age) | !is.na(Fare) | !is.na(SibSp) | !is.na(Parch)) %>%
select(Age, Fare, SibSp, Parch)
View(data_comparar)
data_comparar <- data %>%
filter(!is.na(Age) | !is.na(Fare) | !is.na(SibSp) | !is.na(Parch))
View(data_comparar)
data_comparar <- ata %>%
filter(rowSums(is.na(.[c("Age", "Fare", "SibSp", "Parch")])) > 0) %>%
select(Age, Fare, SibSp, Parch)
data_comparar <- data %>%
filter(rowSums(is.na(.[c("Age", "Fare", "SibSp", "Parch")])) > 0) %>%
select(Age, Fare, SibSp, Parch)
View(data_comparar)
data_comparar <- data %>%
filter(rowSums(is.na(.[c("Age", "Fare", "SibSp", "Parch")])) > 0) %>%
select(PassengerId, Age, Fare, SibSp, Parch)
data_todas <- data %>%
left_join(data_comparar, data_correcta, by = "PassengerId")
View(data_todas)
data_todas <- data %>%
left_join(data_correcta, data_comparar, by = "PassengerId")
View(data_correcta)
data_todas <- data %>%
left_join(data_comparar, data_correcta, by = "PassengerId")
data_todas <- data %>%
inner_join(data_comparar, data_correcta, by = "PassengerId")
View(data_todas)
View(data_correcta)
data_correcta <- data_correcta %>%
select(PassengerId, Age, Fare, SibSp, Parch)
View(data_correcta)
data_todas <- data %>%
inner_join(data_comparar, data_correcta, by = "PassengerId")
data_todas <- data %>%
merge(data_comparar, data_correcta, by = "PassengerId")
data_todas <- data %>%
merge(data_comparar, data_correcta, by = "PassengerId", all = TRUE)
data_correcta <- read_csv("titanic.csv")
data_correcta %>%
mutate(edad_promedio = mean(Age),
fare_promedio = mean(Fare),
edad_mediana = median(Age),
fare_mediano = median(Fare),
edad_moda = Mode(Age),
fare_moda = Mode(Fare))
data_correcta <- read_csv("titanic.csv")
metricas_data data_correcta %>%
metricas_data <- data_correcta %>%
mutate(edad_promedio = mean(Age),
fare_promedio = mean(Fare),
edad_mediana = median(Age),
fare_mediano = median(Fare),
edad_moda = Mode(Age),
fare_moda = Mode(Fare))
View(metricas_data)
metricas_data <- data_correcta %>%
summarise(edad_promedio = mean(Age),
fare_promedio = mean(Fare),
edad_mediana = median(Age),
fare_mediano = median(Fare),
edad_moda = Mode(Age),
fare_moda = Mode(Fare))
estandarizacion <- function(columna, data){
data <- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
}
estandarizacion(Age, data_media)
estandarizacion <- function(columna, data){
data <- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
return(data)
}
estandarizacion(Age, data_media)
View(data_media)
#se utilizara la tabla de data_media
estandarizacion <- function(columna, data){
data <<- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
return(data)
}
estandarizacion(Age, data_media)
data <- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
estandarizacion <- function(columna, data){
data <- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
return(data)
}
estandarizacion(Age, data_media)
data <<- data
estandarizacion <- function(columna, data){
data <- data %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
data <<- data
return(data)
}
estandarizacion(Age, data_media)
estandarizacion <- function(columna, df){
df <- df %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
df <<- df
return(df)
}
estandarizacion(Age, data_media)
estandarizacion <- function(columna, dada_media){
dada_media <- dada_media %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
dada_media <<- dada_media
return(dada_media)
}
estandarizacion(Age, data_media)
View(data_media)
estandarizacion <- function(columna, data_media){
data_media <- data_media %>%
mutate(media = mean({{columna}}),
desv = sd({{columna}}),
{{columna}} := ({{columna}} - media)/ desv) %>%
select(-c(media, desv))
data_media <<- data_media
return(data_media)
}
estandarizacion(Age, data_media)
minmaxscale(Fare, data_media)
estandarizacion(Fare, data_media)
#regresion lineal
data <- read_csv("titanic_MD.csv")
imputacion_media(Age, data)
imputacion_media(SibSp, data)
imputacion_media(Parch, data)
imputacion_media(Fare, data)
data_media <- data
estandarizacion(Age, data_media)
#min max scaling ---------------
minmaxscale <- function(columna, data_media){
data_media <- data_media %>%
mutate(minimo = min({{columna}}),
maximo = max({{columna}}),
{{columna}} := ({{columna}} - minimo)/ (maximo - minimo)) %>%
select(-c(media, desv))
data_media <<- data_media
return(data_media)
}
#min max scaling ---------------
minmaxscale <- function(columna, data_media){
data_media <- data_media %>%
mutate(minimo = min({{columna}}),
maximo = max({{columna}}),
{{columna}} := ({{columna}} - minimo)/ (maximo - minimo)) %>%
select(-c(minimo, maximo))
data_media <<- data_media
return(data_media)
}
minmaxscale(Fare, data_media)
install.packages("sparklyr")
library(sparklyr)
#maxAbsScaler
maxAbsScaler <- function(columna, data_media){
data_media <- data_media %>%
mutate({{columna}} := ft_max_abs_scaler({{columna}}))
data_media <<- data_media
return(data_media)
}
maxAbsScaler(SibSp, data_media)
class(data_media$SibSp)
maxAbsScaler(SibSp, data_media)
install.packages("gensvm")
library(gensvm)
#maxAbsScaler
maxAbsScaler <- function(columna, data_media){
data_media <- data_media %>%
mutate({{columna}} := gensvm.maxabs.scale({{columna}}))
data_media <<- data_media
return(data_media)
}
maxAbsScaler(SibSp, data_media)
gensvm.maxabs.scale(data)
gensvm.maxabs.scale(data$Age)
gensvm.maxabs.scale(data$Fare)
gensvm.maxabs.scale(data_mediana$Fare)
#maxAbsScaler
maxAbsScaler <- function(columna, data_media){
data_media <- data_media %>%
mutate(max_abs <- max(abs({{columna}})),
{{columna}} := {{columna}}/max_abs) %>%
select(-max_abs)
data_media <<- data_media
return(data_media)
}
maxAbsScaler(SibSp, data_media)
data_media <<- data_media
#maxAbsScaler
maxAbsScaler <- function(columna, data_media){
data_media <- data_media %>%
mutate(max_abs = max(abs({{columna}})),
{{columna}} := {{columna}}/max_abs) %>%
select(-c(max_abs))
data_media <<- data_media
return(data_media)
}
maxAbsScaler(SibSp, data_media)
estandarizacion(Parch, data_media)
sd(data$Age)
#data correcta normalizada
estandarizacion(Age, data_media = data_correcta)
View(data_correcta)
#data correcta normalizada
data_correcta <- estandarizacion(Age, data_media = data_correcta)
data_correcta <- minmaxscale(Fare, data_media = data_correcta)
data_correcta <- maxAbsScaler(SibSp, data_media = data_correcta)
data_correcta <- estandarizacion(Parch, data_media = data_correcta)
